apiVersion: v1
kind: Pod
metadata:
  name: nginx
  labels:
    app: nginx
    tier: frontend
    env: production
spec:
  containers:
    - name: nginx
      image: nginx:1.14.2
      ports:
        - containerPort: 80
      env:
        - name: ENVIRONMENT
          value: "production" 
      resources:
        limits:
          memory: "512Mi"
          cpu: "500m"


# kubectl apply -f nginx_pod.yaml
# kubectl get po -o wide
# kubectl describe pod nginx
# kubectl create -f nginx_pod.yaml
# kubectl delete pod nginx
# kubectl delete -f nginx_pod.yaml
# kubectl exec -it nginx -- /bin/bash
# kubctl run nginx --image=nginx:1.14.2 --restart=Never --dry-run=client -o yaml > nginx_pod.yaml
# kubectl edit pod nginx
# to check accross all namespaces
# kubectl get pods --all-namespaces
# kubectl get pods -A
# to get api version
# kubectl api-resources
# kubectl explain pod
# kubectl explain pod.spec
# kubectl delete pods --all
# to select pods based on labels or using regex
# kubectl get pods -l app=nginx
# kubectl get all
 
#  kubectl apply -f pod1.yaml -f pod2.yaml -f pod3.yaml -f svc1.yaml -f svc2.yaml -f svc3.yaml
#  imp ; kubectl run nginx --image=nginx:1.14.2 --expose --port=80 



























# kubectl describe deploy nginx-deployment
# kubectl get rs
# kubectl get pods --show-labels
# kubectl get pods -l app=nginx
# kubectl get pods -l app=nginx,tier=frontend
# kubectl get pods -l 'app in (nginx)'
# kubectl get pods -l 'app in (nginx),tier in (frontend)'
# kubectl get pods -l 'app notin (nginx)'
# kubectl get pods -l 'app notin (nginx),tier notin (frontend)'
# kubectl get pods -l 'app, tier'
# kubectl delete pod <pod_name>
# kubectl delete pod -l app=nginx
# kubectl delete pod -l 'app in (nginx)'
# kubectl delete pod -l 'app in (nginx),tier in (frontend)'
# kubectl delete pod -l 'app, tier'
# kubectl delete pod -l 'app, tier' --all-namespaces
# kubectl get pods -o wide
# kubectl get pods -o wide --show-labels
# kubectl get pods -o wide --show-labels --sort-by=.metadata.name
# kubectl get pods -o wide --show-labels --sort-by=.metadata.creationTimestamp
# kubectl get pods -o wide --show-labels --sort-by=.status.phase
# kubectl get pods -o wide --show-labels --sort-by=.status.phase --watch
# kubectl get pods --field-selector status.phase=Running
# kubectl get pods --field-selector status.phase=Running --show-labels
# kubectl get pods --field-selector metadata.name=nginx-deployment-7b7f9c44f5-2l7n8
# kubectl get pods --field-selector metadata.name=nginx-deployment-7b7f9c44f5-2l7n8 --show-labels
# kubectl get pods --field-selector status.phase=Running,metadata.name=nginx-deployment-7b7f9c44f5-2l7n8
# kubectl get pods --field-selector status.phase=Running,metadata.name=nginx-deployment-7b7f9c44f5-2l7n8 --show-labels
# kubectl get pods --field-selector status.phase=Running,metadata.name=nginx-deployment-7b